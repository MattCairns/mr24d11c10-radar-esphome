esphome:
  name: mmwave-presence
  friendly_name: mmwave-presence

external_components:
  - source:  github://MattCairns/mr24d11c10-radar-esphome
    components: [ mr24d11c10 ]
    refresh: 0s

esp8266:
  board: d1_mini

# Enable logging
logger:
  baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: "wDOsXOqFTm8daWFTR9jx/8ZmrxhwKlAg8ez4diQV0Gw="

ota:
  password: "974d0d8729d34b540d5d3a61f0c40b84"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Mmwave-Presence Fallback Hotspot"
    password: "D2J8V6Q6E7fp"

uart:
  id: uartone
  tx_pin: D3
  rx_pin: D4
  baud_rate: 9600


custom_component:
  - lambda: |-
      auto my_custom_sensor = new MR24D11C10Component(id(uartone));
      App.register_component(my_custom_sensor);
      return {my_custom_sensor};
    components:
      - id: seeedStudioRadar

captive_portal:

binary_sensor:
  - platform: gpio
    pin: GPIO14
    name: "Human presense PIN"
    device_class: PRESENCE

  - platform: gpio
    pin: GPIO12
    name: "Human activity PIN"
  
  - platform: custom
    lambda: |-
      auto uart_component = static_cast<MR24D11C10Component*>(seeedStudioRadar);
      return uart_component->target_present;
    binary_sensors:
      name: "Human presence"

sensor:
- platform: custom
  lambda: |-
    auto uart_component = static_cast<MR24D11C10Component*>(seeedStudioRadar);
    return uart_component->body_movement;

  sensors:
    name: "My Radar Sensor"
    unit_of_measurement: "%"
    accuracy_decimals: 0

select:
  - platform: template
    name: "Scene Settings"
    id: scene_settings
    options:
    - "Default"
    - "Area detection"
    - "Bathroom"
    - "Living Room"
    - "Office"
    - "Hotel"
    initial_option: "Default"
    optimistic: true
    on_value:
      then:
      - lambda: |-
          auto uart_component = static_cast<MR24D11C10Component*>(seeedStudioRadar);
          uint8_t index = 0;
          if (x == "Area detection") {
            index = 1;
          } else if (x == "Bathroom") {
            index = 2;
          } else if (x == "Living Room") {
            index = 3;
          } else if (x == "Office") {
            index = 4;
          } else if (x == "Hotel") {
            index = 5;
          } else {
            index = 0;
          }
          uart_component->send_new_scene_settings(index);

    
  - platform: template
    name: "Threshold"
    id: mode
    options:
    - "1"
    - "2"
    - "3"
    - "4"
    - "5"
    - "6"
    - "7"
    - "8"
    - "9"
    - "10"
    initial_option: "7"
    optimistic: true
    on_value:
      then:
      - lambda: |-
          auto uart_component = static_cast<MR24D11C10Component*>(seeedStudioRadar);
          uint8_t index = 0;
          if (x == "1") {
            index = 1;
          } else if (x == "2") {
            index = 2;
          } else if (x == "3") {
            index = 3;
          } else if (x == "4") {
            index = 4;
          } else if (x == "5") {
            index = 5;
          } else if (x == "6") {
            index = 6;
          } else if (x == "7") {
            index = 7;
          } else if (x == "8") {
            index = 8;
          } else if (x == "9") {
            index = 9;
          } else {
            index = 10;
          }
          uart_component->send_new_threshold(i);
